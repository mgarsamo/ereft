# Ereft - Ethiopian Real Estate Mobile App
# .cursorrules - Development Guidelines and Project Context

## 🏗️ PROJECT ARCHITECTURE

### Backend (Django REST Framework)
- **Framework**: Django >=5.1 + Django REST Framework 3.14+
- **Runtime**: Python 3.11 (Render)
- **Deployment**: Render (Python 3.11)
- **Database**: PostgreSQL via DATABASE_URL environment variable (production), SQLite (development)
- **Authentication**: JWT via djangorestframework-simplejwt
- **File Storage**: Cloudinary for image uploads (manual integration, no django-cloudinary-storage)
- **CORS**: Configured for web/admin tools only (not required for native app)

### Mobile App (React Native + Expo)
- **Framework**: React Native with Expo SDK
- **Navigation**: React Navigation
- **State Management**: React Context API
- **Maps**: react-native-maps with Google Maps API
- **Authentication**: Google OAuth + SMS verification
- **Deep Linking**: Custom scheme 'ereft://oauth'

## 🔐 AUTHENTICATION SYSTEM

### JWT Authentication
- **All protected endpoints require**: `Authorization: Bearer <JWT>`
- **Google OAuth & SMS flows must issue JWT on success**
- **Use djangorestframework-simplejwt + Djoser for JWT implementation**
- **Production JWT Secret Key**: `JWT_SECRET_KEY=JZBngesDHXkqWi8QE0Z5e4FHXMIM6_a5corWBm-vxd3qik6IUXYPr01NCKz8e6DEi-bUTOG4G8kHJtzQdi17MQ`
- **Production Django Secret Key**: `DJANGO_SECRET_KEY=-PT3UOaDXHFGqrToLT6PAMv0uvTaBkGncM6XSuc0I8krFaZCqm0ic47ALeX0r9KGqYfThS4jM9bzmYd8dBS7rw`

### Google OAuth Flow
- **Client IDs**: 
  - iOS: 91486871350-ic7gbroh747pe9u31gqe1jjlhncuiua44.apps.googleusercontent.com
  - Web: 91486871350-79fvub6490473eofjpu1jjlhncuiua44.apps.googleusercontent.com
- **Server redirect (Google → backend)**: HTTPS only (https://ereft.onrender.com/oauth)
- **App re-entry**: Custom deep link `ereft://oauth` is allowed and required for mobile
- **Flow**: Mobile app → Google OAuth → Backend processes code → Returns JWT + user data

### SMS Verification
- **Provider**: Twilio (configured in backend)
- **Flow**: Phone number input → SMS sent → Code verification → Account creation/login with JWT

## 🗺️ MAPS & GEOCODING

### Google Maps Integration
- **API Key**: AIzaSyAWis-jNmUwxCikA2FG7QqLi-nz7jEvadY (from Render environment)
- **Service**: GeocodingService.js for address-to-coordinate conversion
- **Fallback System**: Ethiopian city coordinates when Google can't find exact address
- **Map Display**: react-native-maps with property markers and clustering

## 🏠 PROPERTY LISTING SYSTEM

### Data Models
- **Property**: Core property information (title, description, price, location, features)
- **PropertyImage**: Multiple images per property with Cloudinary URLs
- **UserProfile**: Extended user information (phone, profile picture, agent status)
- **Neighborhood**: Geographic areas for property categorization
- **Favorite**: User-saved properties

### Cloudinary & Images
- **Option B selected**: FileField + manual Cloudinary upload (no django-cloudinary-storage, Avoid Pillow unless switching to ImageField)
- **Store only Cloudinary secure_url in DB**: No image processing on server


## 📱 MOBILE APP STRUCTURE

### Core Screens
- **HomeScreen**: Featured properties, market stats, quick actions
- **MapScreen**: Interactive map with property markers
- **PropertyDetailScreen**: Detailed property information and images
- **AddPropertyScreen**: Create/edit property listings with image upload
- **LoginScreen**: Authentication options (Google, SMS, username/password)
- **ProfileScreen**: User account management


## 🚫 CRITICAL RESTRICTIONS

### Google OAuth Limitations

- **HTTPS Only for Server Redirects**: Must use `https://ereft.onrender.com/oauth` for production
- **Custom Deep Links Allowed**: `ereft://oauth` is allowed and required for mobile app re-entry

### Hardcoding Restrictions
- **No Hardcoded Values**: All configuration must use environment variables
- **No Development Shortcuts**: Production-ready code only
- **No Mock Data**: Use real backend APIs and database

### Production-Only Rule (NON-NEGOTIABLE)
- **NEVER FALL BACK TO LOCAL/TEST**: All code must work in production environment
- **NO LOCALHOST CONFIGURATIONS**: Never change API_BASE_URL to localhost or test servers
- **PRODUCTION-FIRST APPROACH**: All testing and development must use production endpoints
- **NO DEVELOPMENT FALLBACKS**: Never create local/test alternatives to production features

### Build Dependencies
- **Avoid Pillow**: Causes build failures on Render (Python 3.11 compatibility)
- **No django-cloudinary-storage**: Use manual Cloudinary integration instead
- **Minimal Dependencies**: Only essential packages for production

## 🎯 DEVELOPMENT PRINCIPLES

### Production-First Approach
- **No __DEV__ Flags**: All code must work in production
- **Error Handling**: Comprehensive error handling and user feedback
- **Performance**: Optimize for mobile devices and network conditions
- **Security**: Proper Token authentication, validation, and data sanitization

### User Experience
- **Seamless Authentication**: Google OAuth should work like signup/login
- **Offline Support**: Graceful degradation when backend unavailable
- **Loading States**: Clear feedback during API calls and operations
- **Error Recovery**: Help users recover from errors gracefully

### Testing Approach
- **API Testing**: Use curl commands to verify backend endpoints
- **Mobile Testing**: Test on physical devices, not just simulators
- **OAuth Testing**: Verify complete flow from Google to app login
- **Database Testing**: Ensure sample data and real data work correctly

## 🚨 CRITICAL REMINDERS

### Database Safety
- **Never delete production data** without explicit permission
- **Always backup** before major changes
- **Test migrations** on local database first
- **Use populate_sample_data** command for testing

### API Consistency
- **Maintain backward compatibility** when possible
- **Version APIs** if breaking changes are necessary
- **Document all endpoints** with examples
- **Handle errors gracefully** with meaningful messages

### Mobile App Safety
- **Test on real devices** before deployment
- **Verify deep linking** works correctly
- **Check offline behavior** and error states
- **Ensure OAuth flows** complete successfully

## 🛠️ CODE CHANGE PROCESS

### When Adding New Features:
- **Backend-Frontend Sync**: Update both backend (Django) and frontend (React Native) code to keep APIs in sync
- **Endpoint Verification**: Always check existing endpoints and models before creating new ones
- **URL Configuration**: Include necessary imports and update `urls.py` when adding backend routes
- **Serializer Updates**: Write or update DRF serializers when model data changes
- **Context Integration**: On the frontend, update context providers to handle new API responses
- **Naming Consistency**: Maintain consistent naming between backend fields and frontend props

### When Editing Existing Code:
- **Feature Preservation**: Preserve all existing features unless explicitly told to remove them
- **Environment Variables**: Keep environment variable usage intact — no hardcoding
- **Pattern Consistency**: Maintain logging and error handling patterns already present in the file

## 🚫 DEPLOYMENT SAFETY

- **Production Builds**: Do not commit changes that break production builds
- **Database Migrations**: All migrations must run without errors on PostgreSQL
- **Environment Variables**: Do not modify Render environment variables inside code

## 📁 COMPLETE FOLDER STRUCTURE

```
Ereft/
├── .cursorrules                          # Development guidelines and project context
├── README.md                             # Project documentation
├── ereft_api/                            # Django Backend
│   ├── __init__.py
│   ├── config.py                         # Environment configuration
│   ├── settings.py                       # Django settings
│   ├── urls.py                          # Root URL configuration
│   ├── wsgi.py                          # WSGI application
│   ├── manage.py                         # Django management script
│   ├── requirements.txt                  # Python dependencies
│   ├── listings/                         # Main app for property listings
│   │   ├── __init__.py
│   │   ├── admin.py                      # Django admin configuration
│   │   ├── apps.py                       # App configuration
│   │   ├── models.py                     # Data models (Property, PropertyImage, UserProfile, etc.)
│   │   ├── serializers.py                # DRF serializers
│   │   ├── urls.py                       # App URL routing
│   │   ├── views.py                      # API views and endpoints
│   │   ├── utils.py                      # Utility functions (Cloudinary, geocoding)
│   │   ├── migrations/                   # Database migrations
│   │   └── management/                   # Django management commands
│   │       ├── __init__.py
│   │       └── commands/
│   │           ├── __init__.py
│   │           └── populate_sample_data.py # Sample data population
│   ├── static/                           # Static files
│   ├── media/                            # Media uploads (development)
│   └── templates/                        # HTML templates
├── ereft_mobile/                         # React Native Mobile App
│   ├── app.json                          # Expo configuration
│   ├── package.json                      # Node.js dependencies
│   ├── babel.config.js                   # Babel configuration
│   ├── metro.config.js                   # Metro bundler configuration
│   ├── App.js                            # Main app component
│   ├── src/                              # Source code
│   │   ├── components/                   # Reusable UI components
│   │   │   ├── GoogleSignIn.js           # Google OAuth component
│   │   │   ├── PropertyCard.js           # Property display card
│   │   │   ├── ImageGallery.js           # Property image gallery
│   │   │   ├── SearchBar.js              # Property search component
│   │   │   └── LoadingSpinner.js         # Loading indicator
│   │   ├── context/                      # React Context providers
│   │   │   ├── AuthContext.js            # Authentication state management
│   │   │   ├── PropertyContext.js        # Property data management
│   │   │   └── UserStorage.js            # Local storage and demo users
│   │   ├── screens/                      # App screens
│   │   │   ├── HomeScreen.js             # Main dashboard
│   │   │   ├── MapScreen.js              # Interactive property map
│   │   │   ├── PropertyDetailScreen.js   # Property details view
│   │   ├── services/                     # External service integrations
│   │   │   ├── GeocodingService.js       # Google Maps geocoding
│   │   │   ├── CloudinaryService.js      # Image upload service
│   │   │   └── APIService.js             # Backend API communication
│   │   ├── config/                       # Configuration files
│   │   │   └── env.js                    # Environment variables
│   │   ├── utils/                        # Utility functions
│   │   │   ├── constants.js              # App constants
│   │   │   ├── helpers.js                # Helper functions
│   │   │   └── validation.js             # Form validation
│   │   ├── assets/                       # Static assets
│   │   │   ├── images/                   # App images and icons
│   │   │   └── fonts/                    # Custom fonts
│   │   └── navigation/                   # Navigation configuration
│   │       ├── AppNavigator.js           # Main navigation structure
│   │       └── TabNavigator.js           # Tab-based navigation
│   ├── android/                          # Android-specific configuration
│   ├── ios/                              # iOS-specific configuration
│   └── node_modules/                     # Node.js dependencies
├── .gitignore                            # Git ignore patterns
├── .env.example                          # Environment variables template
└── docs/                                 # Additional documentation
    ├── api/                              # API documentation
    ├── deployment/                       # Deployment guides
    └── troubleshooting/                  # Common issues and solutions
```

## 🔄 DEVELOPMENT WORKFLOW

### 1. Feature Development
- **Backend First**: Implement Django models, views, and serializers
- **API Testing**: Verify endpoints with curl or Postman
- **Frontend Integration**: Update React Native components and context
- **Testing**: Test on physical device, not just simulator

### 2. Code Review Checklist
- [ ] No hardcoded values (use environment variables)
- [ ] Proper error handling and logging
- [ ] API endpoints documented and tested
- [ ] Mobile app functionality verified
- [ ] Database migrations tested locally

### 3. Deployment Process
- [ ] Code committed and pushed to main branch
- [ ] Backend automatically deploys on Render
- [ ] Environment variables verified in Render dashboard
- [ ] API endpoints tested on production
- [ ] Mobile app tested with production backend

---

## 🎯 REMEMBER: This is a PRODUCTION-READY Ethiopian real estate app. 
## Every line of code must work in production, handle errors gracefully, 
## and provide a seamless user experience for property buyers, sellers, and agents.
