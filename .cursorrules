# Ereft - Ethiopian Real Estate Mobile App
# .cursorrules - Development Guidelines and Project Context

## üèóÔ∏è PROJECT ARCHITECTURE

### Backend (Django REST Framework)
- **Framework**: Django 4.1.0 + Django REST Framework 3.14.0
- **Deployment**: Render (Python 3.13)
- **Database**: PostgreSQL via DATABASE_URL environment variable (production), SQLite (development)
- **Authentication**: Token-based authentication with Django REST Framework
- **File Storage**: Cloudinary for image uploads (manual integration, no django-cloudinary-storage)
- **CORS**: Configured for mobile app origins

### Mobile App (React Native + Expo)
- **Framework**: React Native with Expo SDK
- **Navigation**: React Navigation
- **State Management**: React Context API
- **Maps**: react-native-maps with Google Maps API
- **Authentication**: Google OAuth + SMS verification
- **Deep Linking**: Custom scheme 'ereft://'

## üîê AUTHENTICATION SYSTEM

### Google OAuth Flow
- **Client IDs**: 
  - iOS: 91486871350-ic7gbroh747pe9u31gqe1jjlhncuiua44.apps.googleusercontent.com
  - Web: 91486871350-79fvub6490473eofjpu1jjlhncuiua44.apps.googleusercontent.com
- **Redirect URI**: https://ereft.onrender.com/oauth (Google only allows HTTPS)
- **Flow**: Mobile app ‚Üí Google OAuth ‚Üí Backend processes code ‚Üí Returns user data + token
- **Backend Endpoint**: /api/auth/google/ (POST with authorization code)
- **Token Verification**: /api/auth/verify-token/ (GET with authentication)

### SMS Verification
- **Provider**: Twilio (configured in backend)
- **Flow**: Phone number input ‚Üí SMS sent ‚Üí Code verification ‚Üí Account creation/login
- **Demo Users**: Available for testing (see UserStorage.js)

### User Management
- **Auto-login**: checkAuthStatus() verifies token with backend on app start
- **Session Persistence**: AsyncStorage for token and user data
- **Password Management**: Reset, change, and account deletion supported

## üó∫Ô∏è MAPS & GEOCODING

### Google Maps Integration
- **API Key**: AIzaSyAWis-jNmUwxCikA2FG7QqLi-nz7jEvadY (from Render environment)
- **Service**: GeocodingService.js for address-to-coordinate conversion
- **Fallback System**: Ethiopian city coordinates when Google can't find exact address
- **Map Display**: react-native-maps with property markers and clustering

### Geocoding Features
- **Address Conversion**: Street addresses to latitude/longitude
- **Reverse Geocoding**: Coordinates to formatted addresses
- **Distance Calculation**: Between properties and user location
- **Fallback Coordinates**: Pre-defined coordinates for Ethiopian cities/districts

## üè† PROPERTY LISTING SYSTEM

### Data Models
- **Property**: Core property information (title, description, price, location, features)
- **PropertyImage**: Multiple images per property with Cloudinary URLs
- **UserProfile**: Extended user information (phone, profile picture, agent status)
- **Neighborhood**: Geographic areas for property categorization
- **Favorite**: User-saved properties

### Property Types
- **Residential**: House, Apartment, Townhouse, Villa
- **Commercial**: Office, Retail, Industrial, Land
- **Listing Types**: Sale, Rent, Lease

### Features & Amenities
- **Basic**: Bedrooms, bathrooms, area (m¬≤), lot size
- **Luxury**: Garage, pool, garden, balcony, AC, heating
- **Status**: Active, featured, published, verified

## üì± MOBILE APP STRUCTURE

### Core Screens
- **HomeScreen**: Featured properties, market stats, quick actions
- **MapScreen**: Interactive map with property markers
- **PropertyDetailScreen**: Detailed property information and images
- **AddPropertyScreen**: Create/edit property listings with image upload
- **LoginScreen**: Authentication options (Google, SMS, username/password)
- **ProfileScreen**: User account management

### Context Providers
- **AuthContext**: Authentication state, user management, OAuth flows
- **PropertyContext**: Property data, CRUD operations, search/filtering
- **UserStorage**: Local data management, demo users, offline support

### Navigation
- **Tab Navigator**: Home, Map, Add Property, Profile
- **Stack Navigator**: Property details, editing, authentication flows
- **Deep Linking**: ereft:// scheme for OAuth callbacks

## üîß TECHNICAL REQUIREMENTS

### Backend API Endpoints
- **Properties**: /api/properties/ (CRUD operations)
- **Featured**: /api/properties/featured/ (featured properties)
- **Stats**: /api/properties/stats/ (market statistics)
- **Search**: /api/properties/search/ (advanced property search)
- **Favorites**: /api/favorites/ (user saved properties)
- **Authentication**: /api/auth/* (login, register, OAuth, token verification)

### URL Routing Priority
- **Critical**: Custom endpoints MUST come BEFORE router.urls to prevent 404s
- **Order**: Custom paths ‚Üí Router ‚Üí Authentication ‚Üí Profile
- **Example**: properties/featured/ must be defined before include(router.urls)

### Database Configuration
- **Production**: Use DATABASE_URL environment variable (PostgreSQL on Render)
- **Development**: Fallback to SQLite for local development
- **Migration**: Always run migrations after model changes

## üö´ CRITICAL RESTRICTIONS

### Google OAuth Limitations
- **No Custom Schemes**: Google does NOT allow ereft://oauth redirect URIs
- **HTTPS Only**: Must use https://ereft.onrender.com/oauth for production
- **Web Client ID**: Use web client ID for OAuth flows (not iOS client ID)

### Hardcoding Restrictions
- **No Hardcoded Values**: All configuration must use environment variables
- **No Development Shortcuts**: Production-ready code only
- **No Mock Data**: Use real backend APIs and database

### Build Dependencies
- **Avoid Pillow**: Causes build failures on Render (Python 3.13 compatibility)
- **No django-cloudinary-storage**: Use manual Cloudinary integration instead
- **Minimal Dependencies**: Only essential packages for production

## üéØ DEVELOPMENT PRINCIPLES

### Production-First Approach
- **No __DEV__ Flags**: All code must work in production
- **Error Handling**: Comprehensive error handling and user feedback
- **Performance**: Optimize for mobile devices and network conditions
- **Security**: Proper authentication, validation, and data sanitization

### User Experience
- **Seamless Authentication**: Google OAuth should work like signup/login
- **Offline Support**: Graceful degradation when backend unavailable
- **Loading States**: Clear feedback during API calls and operations
- **Error Recovery**: Help users recover from errors gracefully

### Data Management
- **Real-time Updates**: Properties should reflect changes immediately
- **Image Handling**: Cloudinary integration for reliable image storage
- **Search & Filtering**: Advanced property discovery capabilities
- **Favorites System**: User-curated property collections

## üîç DEBUGGING & TESTING

### Logging Strategy
- **Frontend**: Console logs with emojis for easy identification
- **Backend**: Print statements for OAuth and critical operations
- **API Calls**: Log request/response details for troubleshooting
- **Error Tracking**: Capture and log all errors with context

### Testing Approach
- **API Testing**: Use curl commands to verify backend endpoints
- **Mobile Testing**: Test on physical devices, not just simulators
- **OAuth Testing**: Verify complete flow from Google to app login
- **Database Testing**: Ensure sample data and real data work correctly

### Common Issues & Solutions
- **404 Errors**: Check URL routing order in listings/urls.py
- **Database Empty**: Use populate_sample_data management command
- **Geocoding Failures**: Verify Google Maps API key and fallback coordinates
- **OAuth Redirects**: Ensure backend /oauth endpoint exists and works

## üìã DEPLOYMENT CHECKLIST

### Backend Deployment
- [ ] All environment variables set in Render
- [ ] requirements.txt includes all dependencies
- [ ] URL routing properly configured
- [ ] Database configuration uses environment variables
- [ ] OAuth endpoints working correctly

### Mobile App Deployment
- [ ] Environment configuration updated
- [ ] Google Maps API key configured
- [ ] Deep linking scheme registered
- [ ] OAuth redirect URI matches backend
- [ ] All API endpoints tested

### Post-Deployment Verification
- [ ] Backend APIs return expected data
- [ ] Google OAuth completes successfully
- [ ] Property listings display correctly
- [ ] Map integration works without errors
- [ ] Image uploads function properly

## üöÄ FUTURE ENHANCEMENTS

### Planned Features
- **Advanced Search**: Filters, saved searches, notifications
- **User Messaging**: Contact property owners/agents
- **Property Verification**: Admin approval system
- **Analytics**: Property views, favorites, market trends
- **Multi-language**: Amharic and English support

### Technical Improvements
- **Caching**: Redis for improved performance
- **Real-time Updates**: WebSocket integration
- **Push Notifications**: Property alerts and updates
- **Offline Mode**: Enhanced offline functionality
- **Performance**: Image optimization and lazy loading

## üìû SUPPORT & CONTACTS

### Project Information
- **Repository**: https://github.com/mgarsamo/ereft
- **Backend**: https://ereft.onrender.com
- **Mobile App**: Expo development build

### Key Technologies
- **Backend**: Django, PostgreSQL, Cloudinary
- **Mobile**: React Native, Expo, Google Maps
- **Authentication**: Google OAuth, Twilio SMS
- **Deployment**: Render, Expo Application Services

### Development Environment
- **Backend**: Python 3.13, Django 4.1.0
- **Mobile**: Node.js, Expo SDK, React Native
- **Database**: PostgreSQL (production), SQLite (development)
- **Version Control**: Git with main branch deployment

---

## üéØ REMEMBER: This is a PRODUCTION-READY Ethiopian real estate app. 
## Every line of code must work in production, handle errors gracefully, 
## and provide a seamless user experience for property buyers, sellers, and agents.

## üõ†Ô∏è CODE CHANGE PROCESS

### When Adding New Features:
- **Backend-Frontend Sync**: Update both backend (Django) and frontend (React Native) code to keep APIs in sync
- **Endpoint Verification**: Always check existing endpoints and models before creating new ones
- **URL Configuration**: Include necessary imports and update `urls.py` when adding backend routes
- **Serializer Updates**: Write or update DRF serializers when model data changes
- **Context Integration**: On the frontend, update context providers to handle new API responses
- **Naming Consistency**: Maintain consistent naming between backend fields and frontend props

### When Editing Existing Code:
- **Feature Preservation**: Preserve all existing features unless explicitly told to remove them
- **Environment Variables**: Keep environment variable usage intact ‚Äî no hardcoding
- **Pattern Consistency**: Maintain logging and error handling patterns already present in the file

## üö´ DEPLOYMENT SAFETY

- **Production Builds**: Do not commit changes that break production builds
- **Database Migrations**: All migrations must run without errors on PostgreSQL
- **Environment Variables**: Do not modify Render environment variables inside code

## üìÅ COMPLETE FOLDER STRUCTURE

```
Ereft/
‚îú‚îÄ‚îÄ .cursorrules                          # Development guidelines and project context
‚îú‚îÄ‚îÄ README.md                             # Project documentation
‚îú‚îÄ‚îÄ ereft_api/                            # Django Backend
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ config.py                         # Environment configuration
‚îÇ   ‚îú‚îÄ‚îÄ settings.py                       # Django settings
‚îÇ   ‚îú‚îÄ‚îÄ urls.py                          # Root URL configuration
‚îÇ   ‚îú‚îÄ‚îÄ wsgi.py                          # WSGI application
‚îÇ   ‚îú‚îÄ‚îÄ manage.py                         # Django management script
‚îÇ   ‚îú‚îÄ‚îÄ requirements.txt                  # Python dependencies
‚îÇ   ‚îú‚îÄ‚îÄ listings/                         # Main app for property listings
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ admin.py                      # Django admin configuration
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ apps.py                       # App configuration
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ models.py                     # Data models (Property, PropertyImage, UserProfile, etc.)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ serializers.py                # DRF serializers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ urls.py                       # App URL routing
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ views.py                      # API views and endpoints
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ utils.py                      # Utility functions (Cloudinary, geocoding)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ migrations/                   # Database migrations
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ management/                   # Django management commands
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ commands/
‚îÇ   ‚îÇ           ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ populate_sample_data.py # Sample data population
‚îÇ   ‚îú‚îÄ‚îÄ static/                           # Static files
‚îÇ   ‚îú‚îÄ‚îÄ media/                            # Media uploads (development)
‚îÇ   ‚îî‚îÄ‚îÄ templates/                        # HTML templates
‚îú‚îÄ‚îÄ ereft_mobile/                         # React Native Mobile App
‚îÇ   ‚îú‚îÄ‚îÄ app.json                          # Expo configuration
‚îÇ   ‚îú‚îÄ‚îÄ package.json                      # Node.js dependencies
‚îÇ   ‚îú‚îÄ‚îÄ babel.config.js                   # Babel configuration
‚îÇ   ‚îú‚îÄ‚îÄ metro.config.js                   # Metro bundler configuration
‚îÇ   ‚îú‚îÄ‚îÄ App.js                            # Main app component
‚îÇ   ‚îú‚îÄ‚îÄ src/                              # Source code
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/                   # Reusable UI components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GoogleSignIn.js           # Google OAuth component
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PropertyCard.js           # Property display card
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ImageGallery.js           # Property image gallery
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SearchBar.js              # Property search component
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ LoadingSpinner.js         # Loading indicator
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ context/                      # React Context providers
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AuthContext.js            # Authentication state management
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PropertyContext.js        # Property data management
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ UserStorage.js            # Local storage and demo users
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ screens/                      # App screens
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HomeScreen.js             # Main dashboard
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MapScreen.js              # Interactive property map
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PropertyDetailScreen.js   # Property details view
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AddPropertyScreen.js      # Create/edit properties
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ LoginScreen.js            # Authentication screen
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ProfileScreen.js          # User profile management
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ SearchScreen.js           # Property search results
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/                     # External service integrations
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GeocodingService.js       # Google Maps geocoding
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CloudinaryService.js      # Image upload service
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ APIService.js             # Backend API communication
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config/                       # Configuration files
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ env.js                    # Environment variables
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ utils/                        # Utility functions
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ constants.js              # App constants
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ helpers.js                # Helper functions
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ validation.js             # Form validation
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ assets/                       # Static assets
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ images/                   # App images and icons
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ fonts/                    # Custom fonts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ navigation/                   # Navigation configuration
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ AppNavigator.js           # Main navigation structure
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ TabNavigator.js           # Tab-based navigation
‚îÇ   ‚îú‚îÄ‚îÄ android/                          # Android-specific configuration
‚îÇ   ‚îú‚îÄ‚îÄ ios/                              # iOS-specific configuration
‚îÇ   ‚îî‚îÄ‚îÄ node_modules/                     # Node.js dependencies
‚îú‚îÄ‚îÄ .gitignore                            # Git ignore patterns
‚îú‚îÄ‚îÄ .env.example                          # Environment variables template
‚îî‚îÄ‚îÄ docs/                                 # Additional documentation
    ‚îú‚îÄ‚îÄ api/                              # API documentation
    ‚îú‚îÄ‚îÄ deployment/                       # Deployment guides
    ‚îî‚îÄ‚îÄ troubleshooting/                  # Common issues and solutions
```

## üîÑ DEVELOPMENT WORKFLOW

### 1. Feature Development
- **Backend First**: Implement Django models, views, and serializers
- **API Testing**: Verify endpoints with curl or Postman
- **Frontend Integration**: Update React Native components and context
- **Testing**: Test on physical device, not just simulator

### 2. Code Review Checklist
- [ ] No hardcoded values (use environment variables)
- [ ] Proper error handling and logging
- [ ] API endpoints documented and tested
- [ ] Mobile app functionality verified
- [ ] Database migrations tested locally

### 3. Deployment Process
- [ ] Code committed and pushed to main branch
- [ ] Backend automatically deploys on Render
- [ ] Environment variables verified in Render dashboard
- [ ] API endpoints tested on production
- [ ] Mobile app tested with production backend

## üö® CRITICAL REMINDERS

### Database Safety
- **Never delete production data** without explicit permission
- **Always backup** before major changes
- **Test migrations** on local database first
- **Use populate_sample_data** command for testing

### API Consistency
- **Maintain backward compatibility** when possible
- **Version APIs** if breaking changes are necessary
- **Document all endpoints** with examples
- **Handle errors gracefully** with meaningful messages

### Mobile App Safety
- **Test on real devices** before deployment
- **Verify deep linking** works correctly
- **Check offline behavior** and error states
- **Ensure OAuth flows** complete successfully

---

## üéØ FINAL REMINDER: This is a PRODUCTION-READY Ethiopian real estate app.
## Every line of code must work in production, handle errors gracefully,
## and provide a seamless user experience for property buyers, sellers, and agents.
